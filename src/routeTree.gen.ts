/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected/route'
import { Route as IndexImport } from './routes/index'
import { Route as ProtectedSettingsImport } from './routes/_protected/settings'
import { Route as ProtectedProjectsIndexImport } from './routes/_protected/projects/index'
import { Route as ProtectedProjectsProjectIdImport } from './routes/_protected/projects/$projectId'
import { Route as ProtectedProjectsProjectIdEditImport } from './routes/_protected/projects/$projectId.edit'
import { Route as ProtectedProjectsProjectIdCollaboratorsImport } from './routes/_protected/projects/$projectId.collaborators'
import { Route as ProtectedProjectsProjectIdIssueCreateImport } from './routes/_protected/projects/$projectId.issue.create'
import { Route as ProtectedProjectsProjectIdIssueIssueIdImport } from './routes/_protected/projects/$projectId.issue.$issueId'

// Create/Update Routes

const ProtectedRouteRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedSettingsRoute = ProtectedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

const ProtectedProjectsIndexRoute = ProtectedProjectsIndexImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => ProtectedRouteRoute,
} as any)

const ProtectedProjectsProjectIdRoute = ProtectedProjectsProjectIdImport.update(
  {
    id: '/projects/$projectId',
    path: '/projects/$projectId',
    getParentRoute: () => ProtectedRouteRoute,
  } as any,
)

const ProtectedProjectsProjectIdEditRoute =
  ProtectedProjectsProjectIdEditImport.update({
    id: '/edit',
    path: '/edit',
    getParentRoute: () => ProtectedProjectsProjectIdRoute,
  } as any)

const ProtectedProjectsProjectIdCollaboratorsRoute =
  ProtectedProjectsProjectIdCollaboratorsImport.update({
    id: '/collaborators',
    path: '/collaborators',
    getParentRoute: () => ProtectedProjectsProjectIdRoute,
  } as any)

const ProtectedProjectsProjectIdIssueCreateRoute =
  ProtectedProjectsProjectIdIssueCreateImport.update({
    id: '/issue/create',
    path: '/issue/create',
    getParentRoute: () => ProtectedProjectsProjectIdRoute,
  } as any)

const ProtectedProjectsProjectIdIssueIssueIdRoute =
  ProtectedProjectsProjectIdIssueIssueIdImport.update({
    id: '/issue/$issueId',
    path: '/issue/$issueId',
    getParentRoute: () => ProtectedProjectsProjectIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/_protected/settings': {
      id: '/_protected/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof ProtectedSettingsImport
      parentRoute: typeof ProtectedRouteImport
    }
    '/_protected/projects/$projectId': {
      id: '/_protected/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof ProtectedProjectsProjectIdImport
      parentRoute: typeof ProtectedRouteImport
    }
    '/_protected/projects/': {
      id: '/_protected/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProtectedProjectsIndexImport
      parentRoute: typeof ProtectedRouteImport
    }
    '/_protected/projects/$projectId/collaborators': {
      id: '/_protected/projects/$projectId/collaborators'
      path: '/collaborators'
      fullPath: '/projects/$projectId/collaborators'
      preLoaderRoute: typeof ProtectedProjectsProjectIdCollaboratorsImport
      parentRoute: typeof ProtectedProjectsProjectIdImport
    }
    '/_protected/projects/$projectId/edit': {
      id: '/_protected/projects/$projectId/edit'
      path: '/edit'
      fullPath: '/projects/$projectId/edit'
      preLoaderRoute: typeof ProtectedProjectsProjectIdEditImport
      parentRoute: typeof ProtectedProjectsProjectIdImport
    }
    '/_protected/projects/$projectId/issue/$issueId': {
      id: '/_protected/projects/$projectId/issue/$issueId'
      path: '/issue/$issueId'
      fullPath: '/projects/$projectId/issue/$issueId'
      preLoaderRoute: typeof ProtectedProjectsProjectIdIssueIssueIdImport
      parentRoute: typeof ProtectedProjectsProjectIdImport
    }
    '/_protected/projects/$projectId/issue/create': {
      id: '/_protected/projects/$projectId/issue/create'
      path: '/issue/create'
      fullPath: '/projects/$projectId/issue/create'
      preLoaderRoute: typeof ProtectedProjectsProjectIdIssueCreateImport
      parentRoute: typeof ProtectedProjectsProjectIdImport
    }
  }
}

// Create and export the route tree

interface ProtectedProjectsProjectIdRouteChildren {
  ProtectedProjectsProjectIdCollaboratorsRoute: typeof ProtectedProjectsProjectIdCollaboratorsRoute
  ProtectedProjectsProjectIdEditRoute: typeof ProtectedProjectsProjectIdEditRoute
  ProtectedProjectsProjectIdIssueIssueIdRoute: typeof ProtectedProjectsProjectIdIssueIssueIdRoute
  ProtectedProjectsProjectIdIssueCreateRoute: typeof ProtectedProjectsProjectIdIssueCreateRoute
}

const ProtectedProjectsProjectIdRouteChildren: ProtectedProjectsProjectIdRouteChildren =
  {
    ProtectedProjectsProjectIdCollaboratorsRoute:
      ProtectedProjectsProjectIdCollaboratorsRoute,
    ProtectedProjectsProjectIdEditRoute: ProtectedProjectsProjectIdEditRoute,
    ProtectedProjectsProjectIdIssueIssueIdRoute:
      ProtectedProjectsProjectIdIssueIssueIdRoute,
    ProtectedProjectsProjectIdIssueCreateRoute:
      ProtectedProjectsProjectIdIssueCreateRoute,
  }

const ProtectedProjectsProjectIdRouteWithChildren =
  ProtectedProjectsProjectIdRoute._addFileChildren(
    ProtectedProjectsProjectIdRouteChildren,
  )

interface ProtectedRouteRouteChildren {
  ProtectedSettingsRoute: typeof ProtectedSettingsRoute
  ProtectedProjectsProjectIdRoute: typeof ProtectedProjectsProjectIdRouteWithChildren
  ProtectedProjectsIndexRoute: typeof ProtectedProjectsIndexRoute
}

const ProtectedRouteRouteChildren: ProtectedRouteRouteChildren = {
  ProtectedSettingsRoute: ProtectedSettingsRoute,
  ProtectedProjectsProjectIdRoute: ProtectedProjectsProjectIdRouteWithChildren,
  ProtectedProjectsIndexRoute: ProtectedProjectsIndexRoute,
}

const ProtectedRouteRouteWithChildren = ProtectedRouteRoute._addFileChildren(
  ProtectedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/settings': typeof ProtectedSettingsRoute
  '/projects/$projectId': typeof ProtectedProjectsProjectIdRouteWithChildren
  '/projects': typeof ProtectedProjectsIndexRoute
  '/projects/$projectId/collaborators': typeof ProtectedProjectsProjectIdCollaboratorsRoute
  '/projects/$projectId/edit': typeof ProtectedProjectsProjectIdEditRoute
  '/projects/$projectId/issue/$issueId': typeof ProtectedProjectsProjectIdIssueIssueIdRoute
  '/projects/$projectId/issue/create': typeof ProtectedProjectsProjectIdIssueCreateRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof ProtectedRouteRouteWithChildren
  '/settings': typeof ProtectedSettingsRoute
  '/projects/$projectId': typeof ProtectedProjectsProjectIdRouteWithChildren
  '/projects': typeof ProtectedProjectsIndexRoute
  '/projects/$projectId/collaborators': typeof ProtectedProjectsProjectIdCollaboratorsRoute
  '/projects/$projectId/edit': typeof ProtectedProjectsProjectIdEditRoute
  '/projects/$projectId/issue/$issueId': typeof ProtectedProjectsProjectIdIssueIssueIdRoute
  '/projects/$projectId/issue/create': typeof ProtectedProjectsProjectIdIssueCreateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_protected': typeof ProtectedRouteRouteWithChildren
  '/_protected/settings': typeof ProtectedSettingsRoute
  '/_protected/projects/$projectId': typeof ProtectedProjectsProjectIdRouteWithChildren
  '/_protected/projects/': typeof ProtectedProjectsIndexRoute
  '/_protected/projects/$projectId/collaborators': typeof ProtectedProjectsProjectIdCollaboratorsRoute
  '/_protected/projects/$projectId/edit': typeof ProtectedProjectsProjectIdEditRoute
  '/_protected/projects/$projectId/issue/$issueId': typeof ProtectedProjectsProjectIdIssueIssueIdRoute
  '/_protected/projects/$projectId/issue/create': typeof ProtectedProjectsProjectIdIssueCreateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/settings'
    | '/projects/$projectId'
    | '/projects'
    | '/projects/$projectId/collaborators'
    | '/projects/$projectId/edit'
    | '/projects/$projectId/issue/$issueId'
    | '/projects/$projectId/issue/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/settings'
    | '/projects/$projectId'
    | '/projects'
    | '/projects/$projectId/collaborators'
    | '/projects/$projectId/edit'
    | '/projects/$projectId/issue/$issueId'
    | '/projects/$projectId/issue/create'
  id:
    | '__root__'
    | '/'
    | '/_protected'
    | '/_protected/settings'
    | '/_protected/projects/$projectId'
    | '/_protected/projects/'
    | '/_protected/projects/$projectId/collaborators'
    | '/_protected/projects/$projectId/edit'
    | '/_protected/projects/$projectId/issue/$issueId'
    | '/_protected/projects/$projectId/issue/create'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProtectedRouteRoute: typeof ProtectedRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProtectedRouteRoute: ProtectedRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_protected"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_protected": {
      "filePath": "_protected/route.tsx",
      "children": [
        "/_protected/settings",
        "/_protected/projects/$projectId",
        "/_protected/projects/"
      ]
    },
    "/_protected/settings": {
      "filePath": "_protected/settings.tsx",
      "parent": "/_protected"
    },
    "/_protected/projects/$projectId": {
      "filePath": "_protected/projects/$projectId.tsx",
      "parent": "/_protected",
      "children": [
        "/_protected/projects/$projectId/collaborators",
        "/_protected/projects/$projectId/edit",
        "/_protected/projects/$projectId/issue/$issueId",
        "/_protected/projects/$projectId/issue/create"
      ]
    },
    "/_protected/projects/": {
      "filePath": "_protected/projects/index.tsx",
      "parent": "/_protected"
    },
    "/_protected/projects/$projectId/collaborators": {
      "filePath": "_protected/projects/$projectId.collaborators.tsx",
      "parent": "/_protected/projects/$projectId"
    },
    "/_protected/projects/$projectId/edit": {
      "filePath": "_protected/projects/$projectId.edit.tsx",
      "parent": "/_protected/projects/$projectId"
    },
    "/_protected/projects/$projectId/issue/$issueId": {
      "filePath": "_protected/projects/$projectId.issue.$issueId.tsx",
      "parent": "/_protected/projects/$projectId"
    },
    "/_protected/projects/$projectId/issue/create": {
      "filePath": "_protected/projects/$projectId.issue.create.tsx",
      "parent": "/_protected/projects/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
